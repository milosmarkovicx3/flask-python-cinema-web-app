------------------------------------------------------------
pip install -r requirements.txt
pip freeze > requirements.txt
pip unistall -r requirements.txt -y
------------------------------------------------------------
(I) Za windows kreirati promenljivu 'PYTHONPATH', gde se vrednost završava sa '..t\zavrsni-rad\'
------------------------------------------------------------




# -ZA-PRODUKCIJU----------------------------------------------------------------
# app.app_context().push()
# db.create_all()
#
# Promenuti database_uri.
# Debug flag na false.
# ------------------------------------------------------------------------------



------------------------------------------------------------
FLASK SETUP ZA PYTHON ANYWHERE
------------------------------------------------------------
1. git clone repo_url

-> tražiće git username i password (koji je ustvari 'GIT Personal Access Token')
token: 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
------------------------------------------------------------
2.  mkvirtualenv env --python='usr/bin/python3.10'

-> kreiramo virtuelno okruženje
------------------------------------------------------------
3. pip install -r .requirements.txt

-> jedini problem koji mi je ovde pravio jeste za instalaciju 'dotenv' plugina,
jer se on instalira preko python-dotenv, pa sam ja ručno ažulirao trenutni fajl
da se problem ne bi pojavio opet
------------------------------------------------------------
4. na web conzoli:

(a) Add a new web app
-> izabrati 'Manual configuration (including virtualenvs)'
-> izabrati najnoviju verziju pythona tj 'Python 3.10'
------------------------------------------------------------
(b) Virtualenv:
-> napisati samo naziv okruženja koje smo napravili, odnosno 'env', to je
dovoljno, jer će sistem sam prepoznati putanju
------------------------------------------------------------
(c) Code: => Source code:
-> napisati samo naziv glavnog foldera, sistem će sam prepoznati putanju
------------------------------------------------------------
(d) Code: => WSGI configuration file:
-> editujemo fajl u kome importujemo aplikaciju i učitamo promenljive iz
'.env' falja pošto sistem ne može da prepozna sam bez pomoći

import sys
path = '/home/arhiv/flask-python-cinema-web-app'
if path not in sys.path:
    sys.path.append(path)

import os
from dotenv import load_dotenv
project_folder = os.path.expanduser(path)
load_dotenv(os.path.join(project_folder, '.env'))

from flask_app import app
application = app
------------------------------------------------------------
(e) Static files:
-> staviti punu putanju iz pwd komande do foldera, poput:

URL: /static/
Directory: home/arhiv/flask-python-cinema-web-app/static
------------------------------------------------------------
(f) Force HTTPS: Enabled
------------------------------------------------------------
**Konstatno osvežavati aplikaciju na web strani posle bilo kakvih izmena.
**Error greške možemo pratiti u logu.
------------------------------------------------------------



------------------------------------------------------------
MYSQL SETUP PYTHON ANYWHERE
------------------------------------------------------------
1. Napravimo bazu:
-> user: arhiv
-> host: arhiv.mysql.pythonanywhere-services.com
-> tabela: arhiv$arhiv
-> lozinka: Losmim123!
------------------------------------------------------------
2. Importujemo staru bazu:
-> uploadujemo fajl preko gita
-> odemo na mysql konzolu za tu bazu
-> source /home/arhiv/flask-python-cinema-web-app/arhiv.sql

problem koji sam viđao ovde jeste da nije hteo da importuje sve tabele, jer
nije mogao da podesi default current_timestamp() za neku datum kolonu, pa sam
morao da prepravim defaultnu vrednost na null, dropovao sve tabele i uradio
import ponovo
------------------------------------------------------------
3. Za export(ovanje) baze:
-> mysqldump --no-tablespaces -u arhiv -h arhiv.mysql.pythonanywhere-services.com 'arhiv$arhiv'  > db-backup.sql

!komandu pokrenuti iz bash konzole iz /home/arhiv foldera
-----------------------------------------------------------
4. Za restore(ovanje) verzije baze:
-> mysql -u arhiv -h arhiv.mysql.pythonanywhere-services.com 'arhiv$arhiv' < db-backup.sql
-----------------------------------------------------------
5. Za povezivanje na bazu:
-> mysql -u arhiv -h arhiv.mysql.pythonanywhere-services.com 'arhiv$arhiv' -p
-----------------------------------------------------------
show databases;
show tables;
use arhiv$arhiv;
source /home/path_to_sql_file.sql
quit;
select * from xzy\G;
(\G flag je za da se svaka kolona prikaže u novom redu)
alter table table_name auto_increment = 1000;
show index from table_name;
create index idx_name on customers (last_name);
alter table table_name drop index idx_name;
drop database db_name;
create databse db_name;
------------------------------------------------------------
6. Problemi sa konekcijom:
-> https://help.pythonanywhere.com/pages/ManagingDatabaseConnections/

Error: MySQLdb.OperationalError: (4031, 'The client was disconnected by the server because
of inactivity. See wait_timeout and interactive_timeout for configuring this behavior.')

-> U suštini PythonAnywhere team je smanjio default vreme od 'wait_timeout' promenljive
28800 na 300, što je oko 5min da se ne bi trošilo serversko vreme za dž. Tu nastupa
sqlalchemy sa promenljivom 'pool_recycle' koja može da se setuje da bi negirala ovu
izmenu i osvežavala konekciju na svakih 280s, tj 20 pre prekida veza sa MySQL serverom.
Međutim nevidljivi problem koji sam debug-ova 14h jeste brisanje/komentarisanje linije
koda sa 'app.app_context().push()'.

Vrednosti promenljivih na MySQL serveru:
mysql> show variables like '%timeout%';
mysql> show global variables like '%timeout%';

Flask-SQLAlchemy dokumentacije:
https://flask-sqlalchemy.palletsprojects.com/en/3.0.x/config/

Podešavanja koja sam takođe pokušavao pri rešavanju greške:
(pool_timeout: 10 i 28000)
app.config['SQLALCHEMY_POOL_RECYCLE'] = 280
app.config['SQLALCHEMY_POOL_TIMEOUT'] = 10
app.config['SQLALCHEMY_POOL_PRE_PING'] = True
app.config['SQLALCHEMY_ENGINE_OPTIONS'] = {
    'pool_recycle': 280,
    'pool_timeout': 10,
    'pool_pre_ping': True
}

Takođe pokušavao dodavanje (?wait_timeout=2147483) na kraj database_uri,
međutim i to izbacuje error jer nije dozvoljeno.

Default vrednosti za SQLAlchemy:
print(db.engine.pool.status())
print("pool_timeoutt:", db.engine.pool.timeout())
print("pool_recycle:", db.engine.pool._recycle)
print("pool_pre_ping:", db.engine.pool._pre_ping)

-> Pool size: 5  Connections in pool: 0 Current Overflow: -5 Current Checked out connections: 0
-> pool_timeoutt: 30.0
-> pool_recycle: 7200
-> pool_pre_ping: False
------------------------------------------------------------

------------------------------------------------------------
VIRTUAL ENV
------------------------------------------------------------
-> workon env

prebaci se na okruženje, gpt kaže da treba za njega plugin:
-> pip install virtualenvwrapper
------------------------------------------------------------
-> deactivate

univerzalna komanda za izlazak iz okruženja
------------------------------------------------------------






